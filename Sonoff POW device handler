/**
 *  Sonoff POW - Tasmota
 *
 *  Copyright 2019 Mark Hutchings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "Sonoff POW - Tasmota", namespace: "mhutchy", author: "Mark Hutchings", mnmn: "SmartThings", vid: "generic-switch-power-energy") {
		capability "Power Meter"
		capability "Switch"
        capability "Refresh"
        capability "Voltage Measurement"
        capability "Energy Meter"
        
        attribute "current", "number"
        attribute "costTotal", "number"
        attribute "energyToday", "string"
        attribute "energyYesterday", "string"
        attribute "costToday", "number"
        attribute "costYesterday", "number"

 	}

 // UI tile definitions
	tiles(scale: 2) {
		multiAttributeTile(name:"switch", type: "generic", width: 2, height: 2, canChangeIcon: true){
			tileAttribute("device.switch", key: "PRIMARY_CONTROL") {
				attributeState("on", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00a0dc")
				attributeState("off", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff")
                			}

        }
        valueTile("power", "device.power", decoration: "flat", width: 4, height: 2) {
			state "power", label: '${currentValue} W'
		}
        valueTile("voltage", "device.voltage", decoration: "flat", width: 2, height: 2) {
			state "default", label:'${currentValue} V'
		}  
        
        valueTile("current", "device.current", decoration: "flat", width: 2, height: 2) {
			state "current", label:'${currentValue} A'
		}         
        
		valueTile("energy", "device.energy", decoration: "flat", width: 2, height: 2) {
			state "default", label:'${currentValue} kWh'
		}
      
		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}
        
		standardTile("costTotal", "device.costTotal", decoration: "flat", width: 2, height: 2) {
			state "default", label:'Total ${currentValue} €'
		}    
 		standardTile("costToday", "device.costToday", decoration: "flat", width: 2, height: 2) {
			state "default", label:'Today ${currentValue} €'
		}         
		standardTile("costYesterday", "device.costYesterday", decoration: "flat", width: 2, height: 2) {
			state "default", label:'Yesterday ${currentValue} €'
		}    
		main "power"
		details(["switch","voltage","current","power","refresh","energy","costYesterday","costToday","costTotal"])
	}
    
    

	
    
    
    
 preferences {
        
        
        input(name: "costPerKwh", type: "number", title: "Price per kWh", description: "Price per kWh", displayDuringSetup: true, required: false)
      

		}


	simulator { 
		// TODO: define status and reply messages here
	}


}

// parse events into attributes


  //  Sonoff doesn't send any data so parse does not work



// handle commands



def installed(){
	log.debug "$device.displayName installed ${settings}"
    initialise()
}

def updated(){
	log.debug "$device.displayName updated ${settings}"
    initialise()
}

def initialise(){
	log.debug "$device.displayName initialising $evt"
  
  // as the sonoff doesn't send parse information we need to ask for updates every minute
  // You can remove this if you do not need updates, ie if the device state is not changed
  // outside of smartthings (by a switch, the Sonoff push button etc)
   runEvery1Minute(update)
}	
    

def update(){
	//log.debug "$device.displayName refreshing status"
    action("status%200")
	
//workout cost of electricity

def kwhrs = device.currentValue("energy") as float
def cost = kwhrs*costPerKwh
cost = cost.round(3)
sendEvent(name: "costTotal", value: cost)
kwhrs = device.currentValue("energyToday") as float
cost = kwhrs*costPerKwh
cost = cost.round(3)
sendEvent(name: "costToday", value: cost)
kwhrs = device.currentValue("energyYesterday") as float
cost = kwhrs*costPerKwh
cost = cost.round(3)
//log.debug "cost $cost"
sendEvent(name: "costYesterday", value: cost)
         
    }

def scheduled (){
	log.debug "$device.displayName scheduled handler"
    }

def parse(){
// If future versions of Tasmota support parsing
	log.debug "$device.displayName Parsing"
    log.debug "description: $description"
    }

def push() {
	action("Power%20Toggle")
    runIn (5, update)
	}

def on() {
	action ("Power%20On")
    runIn (5, update)
    }

def off() {
	action("Power%20Off")
    runIn (5, update)
}

def refresh() {
	update()
    }


//action - Sends command to Sonoff
//based on code found here https://community.smartthings.com/t/any-httpget-smatapps-or-code-anywhere/117945/4
def action(option)
	{
    
    state.action = option
    
	//log.debug "Sending command : '${option}' to $device.displayName at IP:${ipAddress}"
    
    def theAction = new physicalgraph.device.HubAction("""GET /cm?cmnd=${option} HTTP/1.1\r\n Accept: */*\r\nHOST: ${device.deviceNetworkId}:80\r\n\r\n""", physicalgraph.device.Protocol.LAN, "${device.deviceNetworkId}:80", [callback: calledBackHandler])

    sendHubCommand(theAction)
    

}

void calledBackHandler(physicalgraph.device.HubResponse hubResponse)
{
  //treating data received back from sonoff
  //when power command used a one line power on or power off is reveived
  //when status is used then a list of data is receievd, all we are interseted in is the power information
  //If you want to add more status information then details can be found at https://github.com/arendst/Sonoff-Tasmota/wiki/Commands
  
  //log.debug "requested action $state.action"
 state.status = hubResponse.body 
   //log.debug "$device.displayName responded with '$state.status'"
   def reportedState
   if (state.status == """{"POWER":"ON"}""") {
        reportedState = "on"}
   else     
   if (state.status == """{"POWER":"OFF"}""") {
     reportedState = "off"}
   else {
   		def msg = new groovy.json.JsonSlurper().parseText(hubResponse.body)  
   		def SonoffPower = msg.Status.Power
        def SonoffVoltage = msg.StatusSNS.ENERGY.Voltage
        def SonoffCurrent = msg.StatusSNS.ENERGY.Current
        def SonoffFactor = msg.StatusSNS.ENERGY.Factor
        def SonoffReactivePower = msg.StatusSNS.ENERGY.ReactivePower
        def SonoffApparentPower = msg.StatusSNS.ENERGY.ApparentPower
        def Sonoffkw = msg.StatusSNS.ENERGY.Power
        def SonoffToday = msg.StatusSNS.ENERGY.Today
        def SonoffYesterday = msg.StatusSNS.ENERGY.Yesterday
        def SonoffTotal = msg.StatusSNS.ENERGY.Total
        def SonoffIPAddress = msg.StatusNET.IPAddress
        
        sendEvent(name: "voltage", value: "$SonoffVoltage")
   		sendEvent(name: "power", value: "$Sonoffkw")
        sendEvent(name: "energy", value: "$SonoffTotal")
        sendEvent(name: "current", value: "$SonoffCurrent")
        sendEvent(name: "energyToday", value: "$SonoffToday")
        sendEvent(name: "energyYesterday", value: "$SonoffYesterday")
        if (SonoffPower == 1) {reportedState = "on"} else {reportedState = "off"}
        log.debug "$device.displayName UPDATE: Switched ${reportedState} ${SonoffVoltage}V ${SonoffCurrent}A ${Sonoffkw}W Total: ${SonoffTotal}kWh Today: ${SonoffToday}kWh"
        }
      
   	sendEvent(name: "switch", value: reportedState)
    sendEvent(name: "refresh", value: "active")
    log.debug "$device.displayName is ${device.currentValue("switch")}"
}


//all status information can be found here https://github.com/arendst/Sonoff-Tasmota/wiki/Commands


